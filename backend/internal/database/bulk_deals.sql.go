// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: bulk_deals.sql

package database

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const getBulkData = `-- name: GetBulkData :many
SELECT id, date, symbol, security_name, client_name, trade_type, quantity_traded, wt_price FROM bulk_deals
`

func (q *Queries) GetBulkData(ctx context.Context) ([]BulkDeal, error) {
	rows, err := q.db.QueryContext(ctx, getBulkData)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BulkDeal
	for rows.Next() {
		var i BulkDeal
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.Symbol,
			&i.SecurityName,
			&i.ClientName,
			&i.TradeType,
			&i.QuantityTraded,
			&i.WtPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertBulkData = `-- name: InsertBulkData :exec
INSERT INTO bulk_deals (
    date,
    symbol,
    security_name,
    client_name,
    trade_type,
    quantity_traded,
    wt_price
)
SELECT
    UNNEST($1::DATE[]),
    UNNEST($2::TEXT[]),
    UNNEST($3::TEXT[]),
    UNNEST($4::text[]),
    UNNEST($5::trade[]),
    UNNEST($6::TEXT[]),
    UNNEST($7::TEXT[])
`

type InsertBulkDataParams struct {
	Dates         []time.Time
	Symbols       []string
	SecurityNames []string
	ClientNames   []string
	TradeTypes    []Trade
	Quantities    []string
	Prices        []string
}

func (q *Queries) InsertBulkData(ctx context.Context, arg InsertBulkDataParams) error {
	_, err := q.db.ExecContext(ctx, insertBulkData,
		pq.Array(arg.Dates),
		pq.Array(arg.Symbols),
		pq.Array(arg.SecurityNames),
		pq.Array(arg.ClientNames),
		pq.Array(arg.TradeTypes),
		pq.Array(arg.Quantities),
		pq.Array(arg.Prices),
	)
	return err
}
