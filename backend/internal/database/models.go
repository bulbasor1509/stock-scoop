// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package database

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type Trade string

const (
	TradeBUY  Trade = "BUY"
	TradeSELL Trade = "SELL"
)

func (e *Trade) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Trade(s)
	case string:
		*e = Trade(s)
	default:
		return fmt.Errorf("unsupported scan type for Trade: %T", src)
	}
	return nil
}

type NullTrade struct {
	Trade Trade
	Valid bool // Valid is true if Trade is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTrade) Scan(value interface{}) error {
	if value == nil {
		ns.Trade, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Trade.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTrade) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Trade), nil
}

type BulkDeal struct {
	ID             uuid.UUID
	Date           time.Time
	Symbol         string
	SecurityName   string
	ClientName     string
	TradeType      Trade
	QuantityTraded int64
	WtPrice        string
}
